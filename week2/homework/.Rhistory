jj
install.packages("astsa")
library(astsa)
jj
plot(jj, ylab="Earnings per Share", main="J & J")
#----------------------------------------------
#
# Data Science 350
# Aleksey Kramer
# Homework - Week 3
#
#----------------------------------------------
# Create doors.  0 means goat, 1 means prise
doors <- c(0,0,0)
# Set the number of simulations (n)
n = 100000
# Simulation for no switching
before_no_switches <- Sys.time()
no_switches = sapply(1:n, function(x){
# Set location of the prise behind one of the doors (randomly)
prise <- sample(1:3, 1)
doors[prise] <- 1
# Select a random answer to stay with (no switching doors)
attempt <- sample(1:3, 1)
stay <- doors[attempt] == 1
# Reset the doors to initial conditions
doors[prise] <- 0
# Return TRUE/FALSE converted to numbers
return(stay + 0)
})
after_no_switches <- Sys.time()
probability_of_wins_if_not_switched <- length(no_switches[no_switches == 1]) / n
variance_if_not_switched <- var(no_switches)
time_to_run_not_switched <- after_no_switches - before_no_switches
# Simulation for switching
before_switches <- Sys.time()
switches = sapply(1:n, function(x){
# Set location of the prise behind one of the doors (randomly)
prise <- sample(1:3, 1)
doors[prise] <- 1
# Select a random answer to switch from later
initial_attempt <- sample(1:3, 1)
# Host opens a door with no prise
host_door <- sample(1:3, 1)
if(initial_attempt == host_door) {
repeat {
host_door <- sample(1:3, 1)
if(initial_attempt != host_door) {
if(doors[host_door] == 0)
break
}
}
} else if(doors[host_door] != 0) {
repeat {
host_door <- sample(1:3, 1)
if(initial_attempt != host_door) {
if(doors[host_door] == 0)
break
}
}
}
# Find the switch door
repeat {
switch_guess <- sample(1:3, 1)
if(switch_guess != initial_attempt) {
if(switch_guess != host_door) {
break
}
}
}
# Test if the guess is correct and the prise is won
result <- doors[switch_guess] == 1
# Reset the doors to initial conditions
doors[prise] <- 0
# Return TRUE/FALSE converted to numbers
return(result + 0)
})
after_switches <- Sys.time()
probability_of_wins_if_switched <- length(switches[switches == 1]) / n
variance_if_switched <- var(switches)
time_to_run_switches <- after_switches - before_switches
print(paste("Probability of winning if not switched is:", probability_of_wins_if_not_switched))
print(paste("Variance of winning if not switched is:", variance_if_not_switched))
print(paste("Time to run not switched:", time_to_run_not_switched))
print(paste("Probability of winning if switched is:", probability_of_wins_if_switched))
print(paste("Variance of winning if switched is:", variance_if_switched))
print(paste("Time to run switches:", time_to_run_switches))
#----------------------------------------------
#
# Data Science 350
# Aleksey Kramer
# Homework - Week 3
#
#----------------------------------------------
# Create doors.  0 means goat, 1 means prise
doors <- c(0,0,0)
# Set the number of simulations (n)
n = 100000
# Simulation for no switching
before_no_switches <- Sys.time()
no_switches = sapply(1:n, function(x){
# Set location of the prise behind one of the doors (randomly)
prise <- sample(1:3, 1)
doors[prise] <- 1
# Select a random answer to stay with (no switching doors)
attempt <- sample(1:3, 1)
stay <- doors[attempt] == 1
# Reset the doors to initial conditions
doors[prise] <- 0
# Return TRUE/FALSE converted to numbers
return(stay + 0)
})
after_no_switches <- Sys.time()
# Accumulating results from running no_switches simulation
probability_of_wins_if_not_switched <- length(no_switches[no_switches == 1]) / n
variance_if_not_switched <- var(no_switches)
time_to_run_not_switched <- after_no_switches - before_no_switches
# Simulation for switching
before_switches <- Sys.time()
switches = sapply(1:n, function(x){
# Set location of the prise behind one of the doors (randomly)
prise <- sample(1:3, 1)
doors[prise] <- 1
# Select a random answer to switch from later
initial_attempt <- sample(1:3, 1)
# Host opens a door with no prise
host_door <- sample(1:3, 1)
if(initial_attempt == host_door) {
repeat {
host_door <- sample(1:3, 1)
if(initial_attempt != host_door) {
if(doors[host_door] == 0)
break
}
}
} else if(doors[host_door] != 0) {
repeat {
host_door <- sample(1:3, 1)
if(initial_attempt != host_door) {
if(doors[host_door] == 0)
break
}
}
}
# Find the switch door
repeat {
switch_guess <- sample(1:3, 1)
if(switch_guess != initial_attempt) {
if(switch_guess != host_door) {
break
}
}
}
# Test if the guess is correct and the prise is won
result <- doors[switch_guess] == 1
# Reset the doors to initial conditions
doors[prise] <- 0
# Return TRUE/FALSE converted to numbers
return(result + 0)
})
after_switches <- Sys.time()
# Accumulating results for running switches simulation
probability_of_wins_if_switched <- length(switches[switches == 1]) / n
variance_if_switched <- var(switches)
time_to_run_switches <- after_switches - before_switches
# Printing out results
print(paste("Probability of winning if not switched is:", probability_of_wins_if_not_switched))
print(paste("Variance of winning if not switched is:", variance_if_not_switched))
print(paste("Time to run not switched:", time_to_run_not_switched))
print("")
print(paste("Probability of winning if switched is:", probability_of_wins_if_switched))
print(paste("Variance of winning if switched is:", variance_if_switched))
print(paste("Time to run switches:", time_to_run_switches))
install.packages("twitteR")
install.packages("twitteR")
install.packages("devtools")
setRepositories(graphics = getOption("menu.graphics"),
ind = NULL, addURLs = character())
6
setRepositories(graphics = getOption("menu.graphics"), ind = NULL, addURLs = character())
install.packages("ggplot2")
library(twitteR)
install.packages("twitteR"")
C
)
""
install.packages("twitteR")
install.packages("devtools")
devtools::install_version("httr", version="0.6.0", hrpos="http://cran.us.r-project.org")
devtools::install_version("httr", version="0.6.0", repos="http://cran.us.r-project.org")
devtools::install_version("httr", version="0.6.0", repos="http://cran.us.r-project.org")
library(httr)
library(twitteR)
library(devtools)
devtools::install_version("httr", version="0.6.0", repos="http://cran.us.r-project.org")
shapiro.test(rnorm(100, mean=5, sd=3))
shapiro.test(rnorm(100, mean=5, sd=2))
shapiro.test(rnorm(10000, mean=5, sd=3))
shapiro.test(rnorm(5000, mean=5, sd=3))
shapiro.test(runif(5000, min = 2, max = 4))
plot(rnorm(100))
plot(rnorm(100), type = "l")
plot(runif(100))
plot(runif(100), type = "l")
plot(runif(100), type = "l")
hist(rnorm(100))
hist(runif(100))
hist(rnorm(100, mean = 0, sd = 2))
hist(rnorm(1000, mean = 0, sd = 2))
hist(rnorm(5000, mean = 0, sd = 2))
instlal.packages("fitdistrplus")
install.packages('fitdistrplus')
install.packages('logspline')
x <- c(37.50,46.79,48.30,46.04,43.40,39.25,38.49,49.51,40.38,36.98,40.00,
38.49,37.74,47.92,44.53,44.91,44.91,40.00,41.51,47.92,36.98,43.40,
42.26,41.89,38.87,43.02,39.25,40.38,42.64,36.98,44.15,44.91,43.40,
49.81,38.87,40.00,52.45,53.13,47.92,52.45,44.91,29.54,27.13,35.60,
45.34,43.37,54.15,42.77,42.88,44.26,27.14,39.31,24.80,16.62,30.30,
36.39,28.60,28.53,35.84,31.10,34.55,52.65,48.81,43.42,52.49,38.00,
38.65,34.54,37.70,38.11,43.05,29.95,32.48,24.63,35.33,41.34)
x
clear
cear
x
descdist(x, discrete = FALSE)
descdist(x, discrete = FALSE)
?fitdistrplus
require(fitdistrplus)
require(logspline)
descdist(x, discrete = FALSE)
fit.weibull <- fitdist(x, "weibull")
fit.norm <- fitdist(x, "norm")
plot(fit.norm)
?fitdist
fit.norm <- fitdist(x)
fit.norm <- fitdist(x, "norm")
AIC
?AIC
lm1 <- lm(Fertility ~ . , data = swiss)
AIC(lml)
AIC(lm1)
stopifnot(all.equal(ACI(lm1), AIC(logLik(lm1))))
stopifnot(all.equal(AIC(lm1), AIC(logLik(lm1))))
BIC(lm1)
lm2 <- update(lm1, . ~ . -Examination)
AIC(lm1, lm2)
?help
help("datasets")
attach(airquality)
d <- airquality
d
str(d)
pairs(d)
plot(ozone ~ Solar.R)
plot(Ozone ~ Solar.R)
abline(Ozone ~ Solar.R)
lm.ozone <- lm(Ozone ~ Solar.R)
lm
summary(lm.ozone)
sd(Ozone)
sd(Ozone, na.rm = T)
install.packages(c("akima", "curl", "data.table", "devtools", "dplyr", "evaluate", "fitdistrplus", "git2r", "gstat", "intervals", "jsonlite", "MASS", "mime", "pls", "R6", "raster", "Rcpp", "RcppArmadillo", "rversions", "scales", "sp", "splancs", "twitteR", "xml2"))
magic04 = read.table("http://archive.ics.uci.edu/ml/machine-learning-databases/magic/magic04.data", header = F, sep=",")
View(magic04)
View(magic04)
split.data <- function(data, p = 0.7, s = 666){
set.seed(s)
index <- sample(1:dim(data)[1])
train <- data[index[1:floor(dim(data)[1] * p)], ]
test <- data[index[((ceiling(dim(data)[1] * p)) + 1):dim(data)[1]], ]
return(list(train = train, test = test))
}
dati = split.data(magic04, p = 0.7)
train = dati$train
test = dati$test
library(e1071)
install.packages("e1071")
library(e1071)
model <- svm(train[,1:10],train[,11], probability = T)
# prediction on the test set
pred <- predict(model, test[,1:(dim(test)[[2]]-1)], probability = T)
table(pred,test[,dim(test)[2]])
pred.prob <- attr(pred, "probabilities")
pred.to.roc <- pred.prob[, 1]
# performance assessment
library(ROCR)
install.packages("ROCR")
library(ROCR)
pred.rocr <- prediction(pred.to.roc, as.factor(test[,(dim(test)[[2]])]))
perf.rocr <- performance(pred.rocr, measure = "auc", x.measure = "cutoff")
cat("AUC =",deparse(as.numeric(perf.rocr@y.values)),"\n")
perf.tpr.rocr <- performance(pred.rocr, "tpr","fpr")
plot(perf.tpr.rocr, colorize=T)
summary(model)
pred
summary(pred)
table(pred,test[,dim(test)[2]])
install.packages("caret")
## Aleksey Kramer
## Data Viz 200
## Homework 2
## Needs to be changed
# setwd('C:\\Users\\Aleksey\\Documents\\School\\UW_Data_Visualization\\UW_Data_Visualization_200\\week2\\homework')
setwd('C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Data Vis 200')
require(openxlsx)
seattle_file = 'Seattle Crime Data 2014.xlsx'
seattle = read.xlsx(seattle_file, sheet = 1, startRow = 1, colNames = TRUE)
portland_file = 'Portland Crime Data 2014.xlsx'
portland = read.xlsx(portland_file, sheet = 1, startRow = 1, colNames = TRUE)
rm(seattle_file, portland_file)
seattle$Offense.Type =  as.factor(seattle$Offense.Type)
portland$Major.Offense.Type = as.factor(portland$Major.Offense.Type)
setwd('C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Data Vis 200')
require(openxlsx)
install.packages('openxlsx')
setwd('C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Data Vis 200')
require(openxlsx)
seattle_file = 'Seattle Crime Data 2014.xlsx'
seattle = read.xlsx(seattle_file, sheet = 1, startRow = 1, colNames = TRUE)
portland_file = 'Portland Crime Data 2014.xlsx'
portland = read.xlsx(portland_file, sheet = 1, startRow = 1, colNames = TRUE)
rm(seattle_file, portland_file)
seattle$Offense.Type =  as.factor(seattle$Offense.Type)
portland$Major.Offense.Type = as.factor(portland$Major.Offense.Type)
plot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 6000))
plot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 6000)) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 6000))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 10000))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 20000))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 23000))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 30000))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 6000)) # 27 offense types
.
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), las=2)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), las=2) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), las=1)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), las=3)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), las=0)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), las=5)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), las=2)
par(mar=c(0,0,0,0)
par(las=2)
par(las=2)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
par(mar=c(1,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
par(mar=c(5,5,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
par(las=2)
par(mar=c(5,10,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
par(las=2)
par(mar=c(10,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
par(las=2)
par(mar=c(13,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
par(las=2)
par(mar=c(17,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
par(horiz=TRUE)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), horiz=TRUE)
par(mar=c(1,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), horiz=TRUE)
par(las=2)
par(mar=c(17,1,1,1))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000))
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000)) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols)
cols <- c("blue")
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols) # 27 offense types
attach(mtcars)
par(mfrow=c(2,2))
plot(wt,mpg, main="Scatterplot of wt vs. mpg")
par(mfrow=c(1,2))
cols <- c("blue")
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols) # 27 offense types
par(las=2)
par(mar=c(17,5,1,1))
par(mfrow=c(1,2))
cols <- c("blue")
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols) # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, ylab="Number of Incidents") # 27 offense types
par(las=2)
par(mar=c(17,7,1,1))
par(mfrow=c(1,2))
cols <- c("blue")
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, ylab="Number of Incidents") # 27 offense types
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,2))
cols <- c("blue")
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, ylab="Number of Incidents") # 27 offense types
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
png(filename="plot.png", hight=600, width=800)
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,2))
cols <- c("blue")
png(filename="plot.png", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
def.off()
dev.off()
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,2))
cols <- c("blue")
png(filename="plot.png", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
setwd('C:\\Users\\db345c\\Desktop\\UW_TRAIN\\Data Vis 200')
require(openxlsx)
seattle_file = 'Seattle Crime Data 2014.xlsx'
seattle = read.xlsx(seattle_file, sheet = 1, startRow = 1, colNames = TRUE)
portland_file = 'Portland Crime Data 2014.xlsx'
portland = read.xlsx(portland_file, sheet = 1, startRow = 1, colNames = TRUE)
rm(seattle_file, portland_file)
seattle$Offense.Type =  as.factor(seattle$Offense.Type)
portland$Major.Offense.Type = as.factor(portland$Major.Offense.Type)
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,2))
cols <- c("blue")
png(filename="Seattle.png", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
png(filename="Portland.png", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,1))
cols <- c("blue")
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
png(filename="Seattle.png", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
png(filename="Seattle.png", height=800, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,1))
cols <- c("blue")
pdf(filename="Seattle.pdf", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
pdf(filename="Portland.pdf", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
seattle$Offense.Type =  as.factor(seattle$Offense.Type)
portland$Major.Offense.Type = as.factor(portland$Major.Offense.Type)
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,1))
cols <- c("blue")
pdf(filename="Seattle.pdf", height=600, width=800)
pdf("Seattle.pdf", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
pdf("Portland.pdf", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
jpeg("Seattle.pdf", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
jpeg("Portland.pdf", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
par(las=2)
par(mar=c(17,4,1,1))
par(mfrow=c(1,1))
cols <- c("blue")
jpeg("Seattle.jpeg", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
jpeg("Portland.jpeg", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
par(mar=c(17,4,5,5))
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
par(las=2)
par(mar=c(17,4,5,5))
par(mfrow=c(1,1))
cols <- c("blue")
png(filename="Seattle.jpeg", height=600, width=800)
barplot(sort(table(seattle$Offense.Type))[142:169],  ylim=c(0, 27000), col = cols, main="Seattle", ylab="Number of Incidents")
dev.off()
png(filename="Portland.jpeg", height=600, width=800)
barplot(sort(table(portland$Major.Offense.Type)), ylim=c(0, 27000), col = cols, main="Portland", ylab="Number of Incidents") # 27 offense types
dev.off()
